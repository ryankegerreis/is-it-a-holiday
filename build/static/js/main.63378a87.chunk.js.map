{"version":3,"sources":["Views/HolidayInfo.jsx","Views/Holiday.jsx","Views/NoHoliday.jsx","App.js","const.js","serviceWorker.js","index.js"],"names":["HolidayInfo","props","className","console","log","holiday","name","type","Holiday","height","width","d","NoHoliday","today","Date","day","getDate","month","getMonth","year","getFullYear","CALENDAR","App","state","axios","get","then","res","data","response","holidays","length","setState","err","this","renderView","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAEe,SAASA,EAAYC,GAClC,OACE,yBAAKC,UAAU,mBACZC,QAAQC,IAAIH,GACb,qCAAWA,EAAMI,QAAQ,GAAGC,MAC5B,4BAAKL,EAAMI,QAAQ,GAAGC,KAAtB,SAAkCL,EAAMI,QAAQ,GAAGE,KAAK,GAAxD,MCHS,SAASC,EAAQP,GAC9B,OACE,6BACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,OACb,sDACA,wCAAcD,EAAMI,QAAQ,GAAGC,OAEjC,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,MAAMO,OAAO,KAAKC,MAAM,MAAK,2BAAG,0BAAMC,EAAE,6lBAG3D,kBAACX,EAAgBC,ICdR,SAASW,IACtB,OACE,6BACE,yBAAKV,UAAU,iBACb,yBAAKA,UAAU,OACb,+DCCV,IAAMW,EAAQ,IAAIC,KACZC,EAAMF,EAAMG,UACZC,EAAQJ,EAAMK,WAAa,EAC3BC,EAAON,EAAMO,cAEbC,EAAQ,4DCbS,2CDaT,uCAA8FJ,EAA9F,gBAA2GF,GAEpGO,E,YACnB,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQ,CACXlB,QAAS,IAHM,E,iFAME,IAAD,OAClBF,QAAQC,IAAIW,EAAKE,EAAOE,GACxBK,IAAMC,IAAIJ,GAAUK,MAAK,SAACC,GAEpBA,EAAIC,KAAKC,SAASC,SAASC,QAAU,GACvC,EAAKC,SAAS,CACZ3B,QAASsB,EAAIC,KAAKC,SAASC,cAG9BJ,MAAK,SAACO,GACP9B,QAAQC,IAAI6B,MACXP,KAAKvB,QAAQC,IAAI,yB,mCAIpB,OAAI8B,KAAKX,MAAMlB,QAAQ0B,QAAU,EACxB,kBAACvB,EAAD,CAASH,QAAS6B,KAAKX,MAAMlB,UAE7B,kBAACO,EAAD,Q,+BAKT,OACE,6BACGsB,KAAKC,kB,GAhCmBC,aEHbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.63378a87.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function HolidayInfo(props) {\n  return (\n    <div className='holiday-box box'>\n      {console.log(props)}\n      <h1>About {props.holiday[0].name}</h1>\n      <h2>{props.holiday[0].name} is a {props.holiday[0].type[0]}.</h2>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport HolidayInfo from './HolidayInfo'\n\nexport default function Holiday(props) {\n  return (\n    <div>\n      <div className='holiday-box'>\n        <div className='box'>\n          <h2>Yep Today's a Holiday!</h2>\n          <h1>Today is {props.holiday[0].name}</h1>\n        </div>\n        <div className='box'>\n          <svg className='svg' height=\"64\" width=\"64\"><g><path d=\"m28.345 41.676c-1.202 0-2.332-.469-3.182-1.318l-17.66-17.662c-1.754-1.754-1.754-4.609 0-6.363.85-.85 1.98-1.318 3.183-1.318s2.333.468 3.182 1.318l14.477 14.479 14.478-14.479c.85-.85 1.979-1.318 3.182-1.318s2.332.468 3.182 1.318c.851.85 1.318 1.98 1.318 3.182s-.468 2.332-1.318 3.182l-17.659 17.658c-.851.853-1.982 1.321-3.183 1.321zm-17.659-24.661c-.668 0-1.296.26-1.769.732-.975.975-.975 2.561 0 3.535l17.66 17.661c.936.936 2.557.948 3.504.029l17.69-17.69c.473-.473.732-1.1.732-1.768s-.26-1.295-.732-1.768c-.945-.944-2.59-.944-3.535 0l-15.891 15.894-15.891-15.893c-.473-.472-1.1-.732-1.768-.732z\" /></g></svg>\n        </div>\n      </div>\n      <HolidayInfo {...props} />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function NoHoliday() {\n  return (\n    <div>\n      <div className='noholiday-box'>\n        <div className='box'>\n          <h1>Nope today is not a holiday!</h1>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport './App.css';\nimport { API_KEY } from './const'\nimport Holiday from './Views/Holiday'\nimport NoHoliday from './Views/NoHoliday'\n\nconst today = new Date()\nconst day = today.getDate()\nconst month = today.getMonth() + 1\nconst year = today.getFullYear()\n\nconst CALENDAR = `https://calendarific.com/api/v2/holidays?&api_key=${API_KEY}&country=US&year=2019&month=${month}&day=${day}`\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      holiday: []\n    }\n  }\n  componentDidMount() {\n    console.log(day, month, year)\n    axios.get(CALENDAR).then((res) => {\n      // console.log(res.data)\n      if (res.data.response.holidays.length >= 1) {\n        this.setState({\n          holiday: res.data.response.holidays\n        })\n      }\n    }).then((err) => {\n      console.log(err)\n    }).then(console.log(\"Well that happened\"))\n  }\n\n  renderView() {\n    if (this.state.holiday.length >= 1) {\n      return <Holiday holiday={this.state.holiday} />\n    } else {\n      return <NoHoliday />\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderView()}\n      </div>\n    )\n  }\n}","export const API_KEY = 'febfa14113a89ead73f7f93e66370883cf202448'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}